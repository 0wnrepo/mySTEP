/* ObjC-2.0 scanner - based on http://www.lysator.liu.se/c/ANSI-C-grammar-y.html */
/* part of objc2pp - an obj-c 2 preprocessor */

/*
 * FIXME:
 *
 * - accept *any* valid keyword as selector components (and not only non-keywords): + (void) for:x in:y default:z;
 * - correctly handle typedefs for list of names: typedef int t1, t2, t3;
 * - handle nesting of type specifiers, i.e. typedef int (*intfn)(int arg)
 * - handle global/local name scope
 * - handle name spaces for structs and enums
 * - handle @implementation, @interface, @protocol add the object to the (global) symbol table
 * - get notion of 'current class', 'current method' etc.
 * - collect @property entries so that @synthesisze can expand them
 * - add all these Obj-C 2.0 expansions
 *
 * - use the new multi-child approach for nodes
 * - just parse Obj-C 2.x
 * - don't mix with simplification and translation!!! I.e. it must be possible to reconstruct (pretty print) the source code (except for white-space)
 *
 */
 
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#import <ObjCKit/AST.h>

	extern int nokeyword;	// if set to 1 an IDENTIFIER is always returned (even if it looks like a keyword)
	extern int objctype;	// if set to 1 decode some special identifiers as keywords (e.g. in, byref, oneway)
	extern int typename;	// if 1, IDENTIFIERS representing a type name or @class forward declaration are reported as TYPENAME
		
	extern Node *scopestack;	// scope stack

	Node *rootnode;	// root node of the whole tree
	
	Node *declaredName;	// current declarator IDENTIFIER object
	Node *currentDeclarationSpecifier;	// current storage class and base type (e.g. static int)

	Node *structNames;	// struct namespace (dictionary)
	/* is there a separate namespace for unions? */
	Node *enumNames;		// enum namespace (dictionary)
	Node *classNames;		// Class namespace (dictionary)
	Node *protocolNames;	// @protocol namespace (dictionary)

%}

%token SIZEOF PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN 

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%token ASM

%token ID SELECTOR BOOLTYPE UNICHAR CLASS
%token AT_CLASS AT_PROTOCOL AT_INTERFACE AT_IMPLEMENTATION AT_END
%token AT_PRIVATE AT_PUBLIC AT_PROTECTED
%token AT_SELECTOR AT_ENCODE
%token AT_THROW AT_TRY AT_CATCH AT_FINALLY
%token IN OUT INOUT BYREF BYCOPY ONEWAY

%token AT_PROPERTY AT_SYNTHESIZE AT_OPTIONAL AT_REQUIRED WEAK STRONG
%token AT_SYNCHRONIZED AT_DEFS
%token AT_AUTORELEASEPOOL AT_UNSAFE_UNRETAINED AT_AUTORELEASING


%token IDENTIFIER
%token TYPE_NAME
%token CONSTANT
%token STRING_LITERAL
%token AT_STRING_LITERAL
%token AT_ARRAY_LITERAL

%token COMMENT

%start translation_unit

%%

asm_statement
	: ASM IDENTIFIER ';' { $$=[Node node:@"asm", $2, nil]; }
	;

/* FIXME: selectors can consist of *any* word (even if keyword like 'for', 'default') and not only IDENTIFIERs! */
// FIXME: should we merge the selector components into a single node value?

selector
	: { nokeyword=1; } IDENTIFIER { $$=[Node node:@"selector", $1, nil]; }
	| ':'  { $$=[Node node:@"selector", [Node leaf:@"identifier" value:@":"], nil]; }
	| selector { nokeyword=1; } IDENTIFIER { $$=$1; [$$ addChild:$2]; }	// checkme: this would be [obj method:arg suffix]
	| selector ':'  { $$=$1; [$$ addChild:[Node leaf:@"identifier" value:@":"]]; }
	;

selector_with_arguments
	: { nokeyword=1; } IDENTIFIER { $$=[Node node:@"selector", $1, nil]; }
	| ':' expression  { $$=[Node node:@"selector", $2, nil]; }
	| selector_with_arguments { nokeyword=1; } IDENTIFIER { $$=$1; [$$ addChild:$2]; }	// checkme: this would be [obj method:arg suffix]
	| selector_with_arguments ':' expression  { $$=$1; [$$ addChild:$3]; }
	;

primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| '(' expression ')'  { $$=[Node node:@"parexpr", $2, nil]; }
/*	| '(' expression { error("missing )"); } */
	/* gcc extension */
	| '(' compound_statement ')'  { $$=[Node node:@"statementexpr", $2, nil]; }
	/* Obj-C extensions */
	| AT_STRING_LITERAL
	| AT_SELECTOR '(' selector ')'  { $$=$3; }
/*	| AT_SELECTOR '(' selector { $$=$3; error("missing )"); } */
	| AT_ENCODE '(' type_name ')'  { $$=[Node node:@"encode", $3, nil]; }
	| AT_PROTOCOL '(' IDENTIFIER ')'  { $$=[Node node:@"protocol", $3, nil]; }
	| '[' expression selector_with_arguments ']'  { $$=[Node node:@"methodcall", $2, $3, nil]; }
	| AT_ARRAY_LITERAL { $$=[Node node:@"arraylit", nil]; }
	| error
	;

postfix_expression
	: primary_expression
	| postfix_expression '[' expression ']'  { $$=[Node node:@"index", $1, $3, nil]; }
// FIXME: check if the postfix_expression is a IDENTIFIER: then make it an implicitly declared extern function()
	| postfix_expression '(' ')'  { $$=[Node node:@"functioncall", $1, nil]; }
	| postfix_expression '(' argument_expression_list ')'  { $$=[Node node:@"functioncall", $1, $3, nil]; }
	| postfix_expression '.' IDENTIFIER  { $$=[Node node:@"structref", $1, $3, nil]; }
	| postfix_expression PTR_OP IDENTIFIER  { $$=[Node node:@"structderef", $1, $3, nil]; }
	| postfix_expression INC_OP  { $$=[Node node:@"postinc", $1, nil]; }
	| postfix_expression DEC_OP  { $$=[Node node:@"postdec", $1, nil]; }
	;

argument_expression_list
	: assignment_expression	{ $$=[Node node:@"expr", $1, nil]; }
	| argument_expression_list ',' assignment_expression  { $$=$1; [$$ addChild:$3]; }
	;

unary_expression
	: postfix_expression
// FIXME: is ++(char *) x really invalid and must be written as ++((char *) x)?
	| INC_OP unary_expression { $$=[Node node:@"preinc", $2, nil]; }
	| DEC_OP unary_expression { $$=[Node node:@"predec", $2, nil]; }
	| SIZEOF unary_expression { $$=[Node node:@"sizeof", $2, nil]; }
	| SIZEOF '(' type_name ')' { $$=[Node node:@"sizeof", $2, nil]; }
	| unary_operator cast_expression { $$=$1; [$$ addChild:$2]; }
	;

unary_operator
	: '&'  { $$=[Node leaf:@"addrof"]; }
	| '*'  { $$=[Node leaf:@"deref"]; }
	| '+'  { $$=[Node leaf:@"plus"]; }
	| '-'  { $$=[Node leaf:@"minus"]; }
	| '~'  { $$=[Node leaf:@"neg"]; }
	| '!'  { $$=[Node leaf:@"not"]; }
	;

struct_component_expression
	: conditional_expression { $$=[Node node:@"list", $1, nil]; }
	| struct_component_expression ',' conditional_expression   { $$=$1; [$$ addChild:$2]; }
	;
														
cast_expression
	: unary_expression
	| '(' type_name ')' cast_expression { $$=[Node node:@"cast", $2, $4, nil]; }
	| '(' type_name ')' '{' struct_component_expression '}'	 { $$=[Node node:@"structlit", $2, $4, nil]; }
	;

multiplicative_expression
	: cast_expression
	| multiplicative_expression '*' cast_expression { $$=[Node node:@"mult", $1, $3]; }
	| multiplicative_expression '/' cast_expression { $$=[Node node:@"div", $1, $3]; }
	| multiplicative_expression '%' cast_expression { $$=[Node node:@"rem", $1, $3]; }
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression { $$=[Node node:@"add", $1, $3, nil]; }
	| additive_expression '-' multiplicative_expression { $$=[Node node:@"sub", $1, $3, nil]; }
	;

shift_expression
	: additive_expression
	| shift_expression LEFT_OP additive_expression { $$=[Node node:@"shl", $1, $3, nil]; }
	| shift_expression RIGHT_OP additive_expression { $$=[Node node:@"shr", $1, $3, nil]; }
	;

relational_expression
	: shift_expression
	| relational_expression '<' shift_expression { $$=[Node node:@"lt", $1, $3, nil]; }
	| relational_expression '>' shift_expression { $$=[Node node:@"gt", $1, $3, nil]; }
	| relational_expression LE_OP shift_expression { $$=[Node node:@"le", $1, $3, nil]; }
	| relational_expression GE_OP shift_expression { $$=[Node node:@"ge", $1, $3, nil]; }
	;

equality_expression
	: relational_expression
	| equality_expression EQ_OP relational_expression { $$=[Node node:@"eq", $1, $3, nil]; }
	| equality_expression NE_OP relational_expression { $$=[Node node:@"neq", $1, $3, nil]; }
	;

and_expression
	: equality_expression
	| and_expression '&' equality_expression { $$=[Node node:@"and", $1, $3, nil]; }
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' and_expression { $$=[Node node:@"xor", $1, $3, nil]; }
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression { $$=[Node node:@"or", $1, $3, nil]; }
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression { $$=[Node node:@"andif", $1, $3, nil]; }
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR_OP logical_and_expression { $$=[Node node:@"orif", $1, $3, nil]; }
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression { $$=[Node node:@"conditional", $1, $3, $5, nil]; }
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression  { $$=$2; [$$ addChild:$1]; [$$ addChild:$3]; }
	;

assignment_operator
	: '='   { $$=[Node leaf:@"assign"]; }
	| MUL_ASSIGN   { $$=[Node leaf:@"multassign"]; }
	| DIV_ASSIGN   { $$=[Node leaf:@"divassign"]; }
	| MOD_ASSIGN   { $$=[Node leaf:@"remassign"]; }
	| ADD_ASSIGN   { $$=[Node leaf:@"addassign"]; }
	| SUB_ASSIGN   { $$=[Node leaf:@"subassign"]; }
	| LEFT_ASSIGN   { $$=[Node leaf:@"shlassign"]; }
	| RIGHT_ASSIGN   { $$=[Node leaf:@"shrassign"]; }
	| AND_ASSIGN   { $$=[Node leaf:@"andassign"]; }
	| XOR_ASSIGN   { $$=[Node leaf:@"xorassign"]; }
	| OR_ASSIGN   { $$=[Node leaf:@"orassign"]; }
	;

expression
	: assignment_expression{ $$=[Node node:@"list", $1, nil]; }
	| expression ',' assignment_expression  { $$=$1; [$$ addChild:$2]; }
	;

constant_expression
	: conditional_expression
	;

class_with_superclass
	: IDENTIFIER { $$=[Node node:@"hierarchy", $1, nil]; declaredName=$1; }
	| IDENTIFIER ':' IDENTIFIER  { $$=$1; [$$ addChild:$3]; declaredName=$1; }
	;

category_name
	: IDENTIFIER
	;

inherited_protocols
	: protocol_list
	;

class_name_declaration
	: class_with_superclass { $$=[Node node:@"class", $1, nil]; }
	| class_with_superclass '<' inherited_protocols '>' { $$=[Node node:@"class", $1, $3, nil]; }
	| class_with_superclass '(' category_name ')'  { $$=[Node node:@"class", $1, $3, nil]; }
	| class_with_superclass '<' inherited_protocols '>' '(' category_name ')'  { $$=[Node node:@"class", $1, $3, $5, nil]; }
	| error
	;

class_or_instance_method_specifier
	: '+'  { $$=[Node leaf:@"classmethod"]; }
	| '-'  { $$=[Node leaf:@"instancemethod"]; }
	;

do_atribute_specifiers
	: do_atribute_specifier { $$=[Node node:@"attributes", $1, nil]; }
	| do_atribute_specifiers do_atribute_specifier { $$=$1; [$$ addChild:$2]; }	/* collect them */
	;

do_atribute_specifier
	: { objctype=1; } ONEWAY  { $$=[Node leaf:@"oneway"]; }
	| { objctype=1; } IN  { $$=[Node leaf:@"in"]; }
	| { objctype=1; } OUT  { $$=[Node leaf:@"out"]; }
	| { objctype=1; } INOUT  { $$=[Node leaf:@"inout"]; }
	| { objctype=1; } BYREF  { $$=[Node leaf:@"byref"]; }
	| { objctype=1; } BYCOPY  { $$=[Node leaf:@"bycopy"]; }
	;

objc_declaration_specifiers
	: do_atribute_specifiers type_name  { $$=[Node node:@"decl", $1, $2, nil]; }
	| type_name  { $$=[Node node:@"decl", $1, nil]; }
	;

selector_argument_declaration
	: '(' objc_declaration_specifiers ')' IDENTIFIER  { $$=[Node node:@"argument", $2, $4, nil]; }
	;

selector_with_argument_declaration
	: { nokeyword=1; } IDENTIFIER { $$=[Node node:@"selector", $1, nil]; }
	| ':' selector_argument_declaration  { $$=[Node node:@"selector", $2, nil]; }
	| selector_with_argument_declaration { nokeyword=1; } IDENTIFIER { $$=$1; [$$ addChild:$2]; }	// checkme: this would be [obj method:arg suffix]
	| selector_with_argument_declaration ':' selector_argument_declaration  { $$=$1; [$$ addChild:$3]; }
	;

method_declaration
	: class_or_instance_method_specifier '(' objc_declaration_specifiers ')' selector_with_argument_declaration { $$=[Node node:@"methoddeclaration", $1, $3, $5, nil]; }
	;

method_declaration_list
	: method_declaration ';'  { $$=[Node node:@"interface", $1, nil]; }
	| AT_OPTIONAL method_declaration ';'  { [$2 addChild:$1]; $$=[Node node:@"interface", $2, nil]; }
	| AT_REQUIRED method_declaration ';'  { [$2 addChild:$1]; $$=[Node node:@"interface", $2, nil]; }
	| method_declaration_list method_declaration ';'  { $$=$1; [$$ addChild:$2]; }
	| error ';'
	;

ivar_declaration_list
	: '{' '}'  { $$=[Node node:@"components", nil]; }	// empty
	| '{' struct_declaration_list '}'  { $$=$2; }
	;

class_implementation
	: IDENTIFIER	{ $$=[Node node:@"classimp", $1, nil]; }
	| IDENTIFIER '(' category_name ')'  { $$=[Node node:@"classimp", $1, $3, nil]; }
	;

method_implementation
	: method_declaration compound_statement  { $$=[Node node:@"method", $1, $2, nil]; }
	| method_declaration ';' compound_statement  { $$=[Node node:@"method", $1, $3]; }	/* ignore extra ; */
	;

method_implementation_list
	: method_implementation  { $$=[Node node:@"implementation", $1, nil]; }
	| method_implementation_list method_implementation  { $$=$1; [$$ addChild:$2]; }
	;

class_name_list
	: IDENTIFIER { $$=[Node node:@"classname", $1, nil]; [$1 setAttribute:@"" forKey:@"class"]; }
	| class_name_list ',' IDENTIFIER  { $$=$1; [$$ addChild:$3]; [$3 setAttribute:@"" forKey:@"class"]; }
	;

objc_declaration
	: AT_CLASS class_name_list ';' { $$=[Node node:@"forwardclass", $2, nil]; }
	| AT_PROTOCOL class_name_declaration AT_END  { $$=[Node node:@"protocol", $2, nil]; [$2 setAttribute:@"" forKey:@"protocol"]; }
	| AT_PROTOCOL class_name_declaration method_declaration_list AT_END  { $$=[Node node:@"protocol", $2, $3, nil]; [declaredName setAttribute:@"" forKey:@"protocol"]; }
	| AT_INTERFACE class_name_declaration AT_END  { $$=[Node node:@"interface", $2, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	| AT_INTERFACE class_name_declaration ivar_declaration_list AT_END  { $$=[Node node:@"interface", $2, $3, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	| AT_INTERFACE class_name_declaration ivar_declaration_list method_declaration_list AT_END  { $$=[Node node:@"interface", $2, $3, $4, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	| AT_IMPLEMENTATION class_implementation AT_END  { $$=[Node node:@"implementation", $2, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	| AT_IMPLEMENTATION class_implementation ivar_declaration_list AT_END  { $$=[Node node:@"implementation", $2, $3, nil]; [declaredName setAttribute:@"" forKey:@"class"];}
	| AT_IMPLEMENTATION class_implementation method_implementation_list AT_END  { $$=[Node node:@"implementation", $2, $3, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	| AT_IMPLEMENTATION class_implementation ivar_declaration_list method_implementation_list AT_END  { $$=[Node node:@"implementation", $2, $3, $4, nil]; [declaredName setAttribute:@"" forKey:@"class"]; }
	;

declaration
	: declaration_specifiers ';'  { $$=[Node node:@"decl", $1, nil]; }	// e.g. struct name {};
	| declaration_specifiers { currentDeclarationSpecifier=$1; } init_declarator_list ';' { $$=[Node node:@"decl", $1, $3, nil]; }
	| objc_declaration
	;

declaration_specifiers
	: storage_class_specifier  { $$=[Node node:@"type", $1, nil]; }	// auto, register, typedef...
	| type_qualifier  { $$=[Node node:@"type", $1, nil]; }	// const, volatile, ...
	| type_specifier  { $$=[Node node:@"type", $1, nil]; }	// int, long, ...
	| declaration_specifiers storage_class_specifier  { $$=$1; [$$ addChild:$2]; }
	| declaration_specifiers type_qualifier  { $$=$1; [$$ addChild:$2]; }
	| declaration_specifiers type_specifier  { $$=$1; [$$ addChild:$2]; }
	;

storage_class_specifier
	: TYPEDEF { $$=[Node leaf:@"typedef"]; }
	| EXTERN { $$=[Node leaf:@"extern"]; }
	| STATIC { $$=[Node leaf:@"static"]; }
	| AUTO { $$=[Node leaf:@"auto"]; }
	| REGISTER { $$=[Node leaf:@"register"]; }
	;

init_declarator_list
	: init_declarator
	| init_declarator_list ',' init_declarator  { $$=[Node node:@"list", $1, $3]; }
	;

/* for each declarator we should set the attribute
 * @"type" for the class/type (if defined)
 *
 * and we must set it right after parsing the declarator and before the initializer
 * so that we can correctly reference int a=sizeof(a);
 */

init_declarator
	: declarator 
		{ /* add to symbol table */
			[declaredName attributeForKey:@"type"];
			/* check if changed or if we can accept a second declaration; e.g. extern function() + auto function() or an identical definition */
			[declaredName setAttribute:currentDeclarationSpecifier forKey:@"type"];
		}
	| declarator '='
		{ /* add to symbol table */
			[declaredName attributeForKey:@"type"];
			/* check if changed or if we can accept a second declaration; e.g. extern function() + auto function() or an identical definition */
			[declaredName setAttribute:currentDeclarationSpecifier forKey:@"type"];
		} initializer  { $$=[Node node:@"=", $1, $3]; }
	;

protocol_list
	: IDENTIFIER  { declaredName=$1; }
	| protocol_list ',' IDENTIFIER  { $$=[Node node:@"list", $1, $3]; }

type_specifier
	: VOID	{ $$=[Node leaf:@"void"]; }
	| CHAR	{ $$=[Node leaf:@"char"]; }
	| SHORT	{ $$=[Node leaf:@"short"]; }
	| INT	{ $$=[Node leaf:@"int"]; }
	| LONG	{ $$=[Node leaf:@"long"]; }
	| FLOAT	{ $$=[Node leaf:@"float"]; }
	| DOUBLE	{ $$=[Node leaf:@"double"]; }
	| SIGNED	{ $$=[Node leaf:@"signed"]; }
	| UNSIGNED	{ $$=[Node leaf:@"unsigned"]; }
	| struct_or_union_specifier
	| enum_specifier
	| { typename=1; } TYPE_NAME '<' protocol_list '>'	{ $$=[Node node:@"type", $3, nil]; }
	| { typename=1; } TYPE_NAME	{ $$=[Node node:@"type", nil]; }
	;

struct_or_union
	: STRUCT	{ $$=[Node leaf:@"struct"]; }
	| UNION		{ $$=[Node leaf:@"union"]; }
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'  { $$=[Node node:@"struct", $1, $2, $4, nil]; /* accept only forward defines */ [structNames setAttribute:@"" forKey:[$2 value]]; }
	| struct_or_union IDENTIFIER '{' '}'  { $$=[Node node:@"struct", $1, $2, nil]; /* accept only forward defines */ [structNames setAttribute:@"" forKey:[$2 value]]; }
	| struct_or_union '{' struct_declaration_list '}'  { $$=[Node node:@"struct", $1, [Node leaf:@"identifier" value:@"@anonymous@"], $3, nil]; }
	| struct_or_union '{' '}'  { $$=[Node node:@"struct", $1, [Node leaf:@"identifier" value:@"@anonymous@"], nil]; }
	| struct_or_union IDENTIFIER { /* lookup in structNames or forward-define [structNames attributeForKey:[$2 value]] */ $$=[Node node:@"struct", $2, nil]; }
	;

/* FIXME: may be empty! */

struct_declaration_list
	: struct_declaration  { $$=[Node node:@"components", $1, nil]; }
	| struct_declaration_list struct_declaration  { $$=$1; [$$ addChild:$2]; }
	;

property_attributes_list
	: IDENTIFIER	{ $$=[Node node:@"propattribs", $1, nil]; }
	| IDENTIFIER ',' property_attributes_list  { $$=$1; [$$ addChild:$3]; }
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'  { $$=[Node node:@"struct", $1, $2, nil]; }
	| protection_qualifier specifier_qualifier_list struct_declarator_list ';'  { $$=[Node node:@"struct", $1, $2, $3, nil]; }
	| property_qualifier specifier_qualifier_list struct_declarator_list ';'  { $$=[Node node:@"struct", $1, $2, $3, nil]; }
/* formally this is only allowed in iVar declaration but not for structs */
	| AT_SYNTHESIZE ivar_list ';'  { $$=[Node node:@"synthesize", $2, nil]; }
	| AT_DEFS '(' IDENTIFIER ')' { $$=[Node node:@"defs", $2, nil]; }
	;

protection_qualifier
	: AT_PRIVATE	{ $$=[Node leaf:@"private"]; }
	| AT_PUBLIC	{ $$=[Node leaf:@"public"]; }
	| AT_PROTECTED	{ $$=[Node leaf:@"protected"]; }
	;

property_qualifier
	: AT_PROPERTY '(' property_attributes_list ')'  { $$=[Node node:@"property", $1, $3]; }
	| AT_PROPERTY
	;

ivar_list
	: IDENTIFIER { $$=[Node node:@"ivars", $1, nil]; }
	| ivar_list IDENTIFIER  { $$=$1; [$$ addChild:$2]; }
	;

specifier_qualifier_list
	: type_qualifier  { $$=[Node node:@"type", $1, nil]; }	// const, volatile, ...
	| type_specifier  { $$=[Node node:@"type", $1, nil]; }	// int, long, ...
	| declaration_specifiers type_qualifier  { $$=$1; [$$ addChild:$2]; }
	| declaration_specifiers type_specifier  { $$=$1; [$$ addChild:$2]; }
	;

struct_declarator_list
	: struct_declarator  { $$=[Node node:@"components", $1, nil]; }
	| struct_declarator_list ',' struct_declarator  { $$=$1; [$$ addChild:$2]; }
	;

struct_declarator
	: declarator
	| ':' constant_expression  { $$=[Node node:@"bitfield", $2, nil]; }
	| declarator ':' constant_expression  { $$=[Node node:@"bitfield", $1, $3, nil]; }
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM IDENTIFIER '{' enumerator_list '}'
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator { $$=[Node node:@"enum", $1, nil]; }
	| enumerator_list ',' enumerator  { $$=$1; [$$ addChild:$3]; }
	;

enumerator
	: IDENTIFIER  { $$=[Node node:@"value", nil]; }
	| IDENTIFIER '=' constant_expression  { $$=[Node node:@"value", $1, $3, nil]; }
	;

type_qualifier
	: CONST   { $$=[Node leaf:@"const"]; }
	| VOLATILE   { $$=[Node leaf:@"volatile"]; }
	| WEAK   { $$=[Node leaf:@"weak"]; }
	| STRONG   { $$=[Node leaf:@"strong"]; }
	;

declarator
	: pointer direct_declarator  { $$=[Node node:@" ", $1, $2]; }
	| direct_declarator
	;

direct_declarator
	: IDENTIFIER { $$=declaredName=$1; }
	| '(' declarator ')'  { $$=[Node node:@"(", $2, nil]; }
	| direct_declarator '[' constant_expression ']'  { $$=[Node node:@"dim", $1, $3, nil]; }
	| direct_declarator '[' ']'  { $$=[Node node:@"undim", $1, nil]; }
	| direct_declarator '(' parameter_type_list ')'  { $$=[Node node:@"function", $1, $3, nil]; }
	| direct_declarator '(' identifier_list ')'  { $$=[Node node:@"function", $1, $3, nil]; }
	| direct_declarator '(' ')'  { $$=[Node node:@"function", $1, nil]; }
	;

pointer
	: '*' { $$=[Node node:@"pointer", nil]; }
	| '*' type_qualifier_list  { $$=[Node node:@"pointer", $2, nil]; }
	| '*' pointer  { $$=[Node node:@"pointer", $2, nil]; }
	| '*' type_qualifier_list pointer  { $$=[Node node:@"pointer", $2, $3, nil]; }
	;

type_qualifier_list
	: type_qualifier  { $$=[Node node:@"qualifier", $1, nil]; }
	| type_qualifier_list type_qualifier  { $$=$1; [$$ addChild:$2]; }
	;

parameter_type_list
	: parameter_list
	| parameter_list ',' ELLIPSIS  { $$=$1; [$$ addChild:[Node leaf:@"ellipsis"]]; }
	;

parameter_list
	: parameter_declaration
	| parameter_list ',' parameter_declaration  { $$=[Node node:@",", $1, $3, nil]; }
	;

parameter_declaration
	: declaration_specifiers declarator  { $$=[Node node:@" ", $1, $2, nil]; }
	| declaration_specifiers abstract_declarator  { $$=[Node node:@" ", $1, $2, nil]; }
	| declaration_specifiers
	;

identifier_list
	: IDENTIFIER	{ $$=[Node node:@"list", $1, nil]; }
	| identifier_list ',' IDENTIFIER  { $$=$1; [$$ addChild:$3]; }
	;

type_name
	: specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator  { $$=[Node node:@" ", $1, $2, nil]; }
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator  { $$=[Node node:@" ", $1, $2, nil]; }
	;

direct_abstract_declarator
	: '(' abstract_declarator ')' { $$=[Node node:@"(", nil, $2, nil]; }
	| '[' ']'  { $$=[Node node:@"undim", nil]; }
	| '[' constant_expression ']'  { $$=[Node node:@"dim", $2, nil]; }
	| direct_abstract_declarator '[' ']'  { $$=[Node node:@"undim", $1, nil]; }
	| direct_abstract_declarator '[' constant_expression ']'  { $$=[Node node:@"dim", $1, $2, nil]; }
	| '(' ')'  { $$=[Node node:@"function", nil]; }
	| '(' parameter_type_list ')'  { $$=[Node node:@"function", $2, nil]; }
	| direct_abstract_declarator '(' ')'  { $$=[Node node:@"function", $1, nil]; }
	| direct_abstract_declarator '(' parameter_type_list ')'  { $$=[Node node:@"function", $1, $2, nil]; }
	;

initializer
	: assignment_expression
	| '.' IDENTIFIER '=' assignment_expression  { $$=[Node node:@"componentinit", $2, $4, nil]; }	// struct = { .component=something }
	| '{' initializer_list '}'  { $$=[Node node:@"init", $2, nil]; }
	| '{' initializer_list ',' '}'  { $$=[Node node:@"init", $2, nil]; }	/* removes extra , */
	;

initializer_list
	: initializer   { $$=[Node node:@"initlist", $1, nil]; }
	| initializer_list ',' initializer  { $$=$1; [$$ addChild:$3]; }
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| asm_statement
	| AT_TRY compound_statement catch_sequence finally	{ $$=[Node node:@"try", $2, $3, $4, nil]; }
	| AT_THROW ';'	{ $$=[Node node:@"throw", nil]; }
	| AT_THROW expression ';'	{ $$=[Node node:@"throw", $2, nil]; }
	| AT_SYNCHRONIZED '(' expression ')' compound_statement	{ $$=[Node node:@"synchronized", $2, $4, nil]; }
	| AT_AUTORELEASEPOOL compound_statement	{ $$=[Node node:@"arp", $2, nil]; }
	| error ';' 	{ $$=[Node leaf:@"error"]; }
	| error '}'		{ $$=[Node leaf:@"error"]; }
	;

catch_sequence
	: AT_CATCH compound_statement	{ $$=[Node node:@"catch", $2, nil]; }
	| catch_sequence AT_CATCH compound_statement	{ $$=$1, [$$ addChild:$3]; }
	;

finally
	: AT_FINALLY compound_statement	{ $$=[Node node:@"finally", $2, nil]; }
	;

labeled_statement
// FIXME: is the label blocked for variable/function names? i.e. treated as some special storage class? If yes, check&tag the identifier
	: IDENTIFIER ':' statement  { $$=[Node node:@"label", $1, $3, nil]; }
	| CASE constant_expression ':' statement  { $$=[Node node:@"case", $2, $4, nil]; }
	| DEFAULT ':' statement  { $$=[Node node:@"default", $3, nil]; }
	;

compound_statement
	: '{' '}'  { $$=[Node node:@"block", nil]; }
	| '{' { pushscope(); } statement_list '}'  { $$=[Node node:@"{", $2, nil]; popscope(); }
	;

statement_list
	: declaration { $$=[Node node:@"statementlist", $1, nil]; }
	| statement { $$=[Node node:@"statementlist", $1, nil]; }
	| statement_list statement  { $$=$1, [$$ addChild:$2]; }
    | statement_list declaration  { $$=$1, [$$ addChild:$2]; }
	;

expression_statement
	: ';'  { $$=[Node node:@"expr", nil]; }
	| expression ';'  { $$=[Node node:@"expr", $1, nil]; }
	;

selection_statement
	: IF '(' expression ')' statement {	$$=[Node node:@"if", $3, $5, nil]; }
	| IF '(' expression ')' statement ELSE statement { $$=[Node node:@"ifelse", $3, $5, $7, nil]; }
	| SWITCH '(' expression ')' statement  { $$=[Node node:@"switch", $3, $5, nil]; }
	;

iteration_statement
	: WHILE '(' expression ')' statement  { $$=[Node node:@"while", $3, $5, nil]; }
	| DO statement WHILE '(' expression ')' ';'  { $$=[Node node:@"do", $3, $5, nil]; }
	| FOR '(' expression_statement expression_statement ')' statement { $$=[Node node:@"for", $3, $5, $6, nil]; }
	| FOR '(' expression_statement expression_statement expression ')' statement { $$=[Node node:@"forinc", $3, $4, $5, $7, nil]; }
	| FOR '(' declaration expression_statement expression ')' statement	 { $$=[Node node:@"fordecl", $3, $4, $5, $7, nil]; }
	| FOR '(' declaration IN expression ')' statement	 { $$=[Node node:@"forin", $3, $5, $7, nil]; }
	;

jump_statement
	: GOTO IDENTIFIER ';'  { $$=[Node node:@"goto", $2, nil]; }
	| CONTINUE ';'  { $$=[Node leaf:@"continue"]; }
	| BREAK ';' { $$=[Node leaf:@"break"]; }
	| RETURN ';' { $$=[Node leaf:@"return"]; }
	| RETURN expression ';' { $$=[Node node:@"return", $2, nil]; }
	;

function_definition // FIXME: add to symbol table - may overwrite/augment/conflict a function declaration or implicit forward declaration
	: declaration_specifiers declarator compound_statement { $$=[Node node:@"function", $1, $2, $3, nil]; }
	| declarator compound_statement { $$=[Node node:@"function", [Node leaf:@"public"], $1, $2, nil]; }
	;

external_declaration
	: function_definition
	| declaration
	| asm_statement
	;

// allow to notify the delegate for each translation unit and clean up memory from nodes we don't need any more

translation_unit
	: external_declaration { $$=rootnode=$1; /* notify delegate */ }
	| translation_unit external_declaration { $$=rootnode=[Node node:@"unit", $1, $2, nil]; /* notify delegate */ }
	;

%%

extern char *yytext;
extern int line, column;

yyerror(s)
char *s;
{
	// forward to AST delegate (if it exists)
	fflush(stdout);
	printf("#error line %d column %d\n", line, column);
	printf("/* %s\n * %*s\n * %*s\n*/\n", yytext, column, "^", column, s);
	fflush(stdout);
}

